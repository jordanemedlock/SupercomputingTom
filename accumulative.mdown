# Toms lessons 

## Java Brush Up

------------------------
April 27th

public class Main {
  public static void main(String[] args) {
    System.out.println("Hello World!");
  }
}

Say what each piece does, what it is, and what alternatives there could be. And what each one of those alternatives would do.

- public
- class
- Main
- public
- static
- void
- main
- String[]
- args
- System.out.println("Hello World!");
- "Hello World!"

How do you compile a Java program?
How do you run a Java program?
Whats the difference?

What is bytecode?

What is a port?
What is IP?
What is an IP address?

What does the .java file represent?
What does the .class file represent?

Assignment: ASCII Art, "Lab 1.pdf"

What are the steps to commit and push in GIT?

--------------------------------

		How do you access command line arguments? system.out
How do you access STDIN? using teh scanner(System.in)
What is STDIN? standard input that can be changed while the program is running
What is STDIN, STDOUT, STDERR? And Whats the difference? out is taking the output and err is error
Whats the difference between STDIN and command line arguments?
stdin is used while the program is run
Whats the difference between STD* and file access?
file acces writes with the info it gets
What is a class and how do you define one in Java? a template	
What is a method and how do you define one in Java? a thing that does stuff you want
What is an instance variable and how do you define one in Java? a variable within the object
What is an local variable and how do you define one in Java? traits of an object predefined
What is the difference between an instance variable and a local variable? local cant be changed

What is the difference between an object and a class? a class sets the attributes for objects
How do you create a object in Java? Int i = new int
How do you access an instance variable in that object?  private int root
How do you access a method in that object? while
How do you access a local variable in that object? int count = 0

What is `this` and how do you use it? it references the current object allowing for access to said object

What is an `enum` and how can you use one? it allows for a variable to have multiple predefined constants
Give me an example of an enum, create it then use it in an imaginary context. public enum direction {
	NORTH, SOUTH, EAST, WEST
}

How do you define a JavaDoc comment? the structure template for java to format the code.

string stuff:
String c = "abc".substring(2,3);
     String d = cde.substring(1, 2);
 substrings can be added to other strings

 The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. String concatenation is implemented through the StringBuilder(or StringBuffer) class and its append method.
 strings can build on other strings and convert non strings to strings

 A String represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs (see the section Unicode Character Representations in the Character class for more information). Index values refer to char code units, so a supplementary character uses two positions in a String - storing strings is different than other stuff

 comparator strings allow you to compare one string to another like its a template.

 public String(byte[] bytes,
      int offset,
      int length,
      Charset charset)

      works with the charset function to decode a subarray of bytes and traslate it into charset

pointat allows for java to single out parts of a string

content equals is a function to have strings be different variables but contain the same thing as a boolean function

regionmatches are weird. they compare sub strings and try to find if the character sequences are the same

Scanner has a whitespace delimiter called Character.isWhitespace

The next() and hasNext() methods and their primitive-type companion methods (such as nextInt() and hasNextInt()) first skip any input that matches the delimiter pattern, and then attempt to return the next token. Both hasNext and next methods may block waiting for further input. Whether a hasNext method blocks has no connection to whether or not its associated next method will block.

The findInLine(java.lang.String), findWithinHorizon(java.lang.String, int), and skip(java.util.regex.Pattern) methods operate independently of the delimiter pattern. These methods will attempt to match the specified pattern with no regard to delimiters in the input and thus can be used in special circumstances where delimiters are not relevant. These methods may block waiting for more input.

public Scanner(InputStream source) allows input from only one input stream

scanner file allows for you to scan files

scanner path helps file by producing values from the scanned file

readable byte channel does the same thing but with channels

next uses pattern recognition

hasNext returns true if the next complete token matches the pattern

next_ is next line it scans for pattern tokens on more than one line

User interfaces and operating systems use system-dependent pathname strings to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames. An abstract pathname has two components:

An optional system-dependent prefix string, such as a disk-drive specifier, "/" for the UNIX root directory, or "\\\\" for a Microsoft Windows UNC pathname, and
A sequence of zero or more string names.
The first name in an abstract pathname may be a directory name or, in the case of Microsoft Windows UNC pathnames, a hostname. Each subsequent name in an abstract pathname denotes a directory; the last name may denote either a directory or a file. The empty abstract pathname has no prefix and an empty name sequence.
The conversion of a pathname string to or from an abstract pathname is inherently system-dependent. When an abstract pathname is converted into a pathname string, each name is separated from the next by a single copy of the default separator character. The default name-separator character is defined by the system property file.separator, and is made available in the public static fields separator and separatorChar of this class. When a pathname string is converted into an abstract pathname, the names within it may be separated by the default name-separator character or by any other name-separator character that is supported by the underlying system.

A pathname, whether abstract or in string form, may be either absolute or relative. An absolute pathname is complete in that no other information is required in order to locate the file that it denotes. A relative pathname, in contrast, must be interpreted in terms of information taken from some other pathname. By default the classes in the java.io package always resolve relative pathnames against the current user directory. This directory is named by the system property user.dir, and is typically the directory in which the Java virtual machine was invoked.

The parent of an abstract pathname may be obtained by invoking the getParent() method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any File object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname "/usr" is an ancestor of the directory denoted by the pathname "/usr/local/bin".

The prefix concept is used to handle root directories on UNIX platforms, and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms, as follows:

For UNIX platforms, the prefix of an absolute pathname is always "/". Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix "/" and an empty name sequence.
For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by ":" and possibly followed by "\\" if the pathname is absolute. The prefix of a UNC pathname is "\\\\"; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not specify a drive has no prefix.
Instances of this class may or may not denote an actual file-system object such as a file or a directory. If it does denote such an object then that object resides in a partition. A partition is an operating system-specific portion of storage for a file system. A single storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may contain multiple partitions. The object, if any, will reside on the partition named by some ancestor of the absolute form of this pathname.

A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as access permissions. The file system may have multiple sets of access permissions on a single object. For example, one set may apply to the object's owner, and another may apply to all other users. The access permissions on an object may cause some methods in this class to fail.

Instances of the File class are immutable; that is, once created, the abstract pathname represented by a File object will never change.